import path from 'path';
import { app, session, shell, BrowserWindow } from 'electron';
import type { WebContents } from 'electron';
// This allows TypeScript to pick up the magic constant that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

const isDev = !app.isPackaged;
const customProtocol = 'npld-viewer';
let mainWindow: BrowserWindow = null;
let webview: WebContents = null;

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require('electron-squirrel-startup')) {
  // eslint-disable-line global-require
  app.quit();
}

// Open links in browser with app
// https://www.electronjs.org/docs/v14-x-y/tutorial/launch-app-from-url-in-another-app
if (process.defaultApp) {
  if (process.argv.length >= 2) {
    app.setAsDefaultProtocolClient(customProtocol, process.execPath, [
      path.resolve(process.argv[1]),
    ]);
  }
} else {
  app.setAsDefaultProtocolClient(customProtocol);
}

const createWindow = (): void => {
  session.defaultSession.webRequest.onHeadersReceived((details, callback) => {
    // Define content security policy
    let csp = [
      "default-src 'self'",
      "script-src 'self'",
      "style-src 'self' 'unsafe-inline'",
    ].join(';');

    if (isDev) {
      csp = [
        "default-src 'self' 'unsafe-inline' data:",
        // Allow unsafe-eval for Webpack
        "script-src 'self' 'unsafe-eval' 'unsafe-inline' data:",
        "style-src 'self' 'unsafe-inline'",
      ].join(';');
    }

    callback({
      responseHeaders: {
        ...details.responseHeaders,
        'Content-Security-Policy': csp,
      },
    });
  });

  // Block downloads
  // TODO show user feedback?
  session.defaultSession.on('will-download', (event, item, webContents) => {
    event.preventDefault();
    console.log(
      `Download Blocked for ${item.getURL()} - (${item.getMimeType()})`
    );
  });

  // Create the browser window.
  mainWindow = new BrowserWindow({
    show: false, // show once the renderer process has rendered
    height: 600,
    width: 800,
    webPreferences: {
      webviewTag: true, // Enable <webview>
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
    },
  });

  // and load the index.html of the app.
  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);

  // Main window events:
  mainWindow.once('ready-to-show', () => {
    mainWindow.maximize();
    mainWindow.show();
  });

  mainWindow.webContents.once('did-attach-webview', (event, webContents) => {
    webview = webContents;

    webview.on('will-navigate', (event, url) => {
      // Open links without prefix in default browser
      if (!url.startsWith(`npld-viewer://${process.env.NPLD_PLAYER_PREFIX}`)) {
        event.preventDefault();
        shell.openExternal(url);
      }
    });
  });

  if (isDev) {
    // Open the DevTools.
    mainWindow.webContents.openDevTools({
      mode: 'detach',
    });
  }
};

const focusWindow = () => {
  if (!mainWindow) return;

  if (mainWindow.isMinimized()) mainWindow.restore();
  mainWindow.focus();
};

// Force single application instance in Windows
const gotTheLock = app.requestSingleInstanceLock();

if (!gotTheLock) {
  app.quit();
} else {
  // This method will be called when Electron has finished
  // initialization and is ready to create browser windows.
  // Some APIs can only be used after this event occurs.
  app.whenReady().then(() => {
    createWindow();
  });

  app.on('second-instance', () => {
    // Someone tried to run a second instance, we should focus our window.
    focusWindow();
  });

  app.on('open-url', function (event, arg) {
    event.preventDefault();
    focusWindow();

    // Load URL in webview
    const url = arg.replace('npld-viewer://', '');
    if (webview) {
      webview.loadURL(url);
    } else {
      console.debug('Webview not available');
    }
  });

  // Quit when all windows are closed, except on macOS. There, it's common
  // for applications and their menu bar to stay active until the user quits
  // explicitly with Cmd + Q.
  app.on('window-all-closed', () => {
    if (process.platform !== 'darwin') {
      app.quit();
    }
  });

  app.on('activate', () => {
    // On OS X it's common to re-create a window in the app when the
    // dock icon is clicked and there are no other windows open.
    if (BrowserWindow.getAllWindows().length === 0) {
      createWindow();
    }
  });
}
